#include<stdio.h>
#include<stdlib.h>
void pop(),push(char),display();
char stack[100]="\0", input[100], *ip;
int top=-1;
void push(char c)
{
	top++;
	stack[top]=c;
}
void pop()
{
	stack[top]='\0';
	top--;
}
void display()
{
	printf("\n%s\t%s\t",stack,ip);
}
int main()
{
	printf("E->E+E\n");
	printf("E->E*E\n");
	printf("E->(E)\n");
	printf("E->d\n");
	printf("Enter the input string followed by $ \n");
	scanf("%s",input);
	ip=input;
	push('$');
	printf("STACK\t BUFFER \t ACTION\n");
	printf("-----\t ------- \t------ \n");
	display();
	if(stack[top]=='$' && *ip=='$'){
		printf("Null Input");
		exit(0);
	}
	do
	{
		if((stack[top]=='E' && stack[top-1]=='$') && (*(ip)=='$'))
		{
			display();
			printf(" Valid\n\n\n");
			break;
		}
		if(stack[top]=='$')
		{
			push(*ip);
			ip++;
			printf("Shift");
		}
		else if(stack[top]=='d')
		{
			display();
			pop();
			push('E');
			printf("Reduce E->d");
		}
		else if(stack[top]=='E' && stack[top-1]=='+' && stack[top-2]=='E'&& ip!='')
		{
			display();
			pop();
			pop();
			pop();
			push('E');
			printf("Reduce E->E+E");
		}
		else if(stack[top]=='E' && stack[top-1]=='*' && stack[top-2]=='E')
		{
			display();
			pop();
			pop();
			pop();
			push('E');
			printf("Reduce E->E*E");
		}
		else if(stack[top]==')' && stack[top-1]=='E' && stack[top-2]=='(')
		{
			display();

			pop();
			pop();
			pop();
			push('E');
			printf("Reduce E->(E)");
		}
		else if(*ip=='$')
		{ 
			printf(" Invalid\n\n\n");
			break;
		}
		else
		{
			display();
			push(*ip);
			ip++;
			printf("shift");
		}
	}while(1);
}#include<stdio.h>
#include<stdlib.h>
void pop(),push(char),display();
char stack[100]="\0", input[100], *ip;
int top=-1;
void push(char c)
{
	top++;
	stack[top]=c;#include<stdio.h>
}
#include<stdlib.h>
void pop(),push(char),display();
char stack[100]="\0", input[100], *ip;
int top=-1;
void pop()
void push(char c)
{
{
	stack[top]='\0';
	top++;
	top--;
	stack[top]=c;
}
}
void display()
void pop()
{
{#include<stdio.h>
	printf("\n%s\t%s\t",stack,ip);
#include<stdlib.h>
	stack[top]='\0';
void pop(),push(char),display();
char stack[100]="\0", input[100], *ip;
int top=-1;
}
	top--;
void push(char c)
int main()
}
{
{
void display()
	top++;
	printf("E->E+E\n");
{
	stack[top]=c;
	printf("E->E*E\n");
	printf("\n%s\t%s\t",stack,ip);
}
	printf("E->(E)\n");
}
void pop()
	printf("E->d\n");
int main()
{
	printf("Enter the input string followed by $ \n");
{
	stack[top]='\0';
	scanf("%s",input);
	printf("E->E+E\n");
	top--;
	ip=input;
	printf("E->E*E\n");
}
	push('$');
	printf("E->(E)\n");
void display()
	printf("STACK\t BUFFER \t ACTION\n");
	printf("E->d\n");
{
	printf("-----\t ------- \t------ \n");
	printf("Enter the input string followed by $ \n");
	printf("\n%s\t%s\t",stack,ip);
	display();
	scanf("%s",input);
}
	if(stack[top]=='$' && *ip=='$'){
	ip=input;
int main()
		printf("Null Input");
	push('$');
{
		exit(0);
	printf("STACK\t BUFFER \t ACTION\n");
	printf("E->E+E\n");
	}
	printf("-----\t ------- \t------ \n");
	printf("E->E*E\n");
	do
	display();
	printf("E->(E)\n");
	{
	if(stack[top]=='$' && *ip=='$'){
	printf("E->d\n");
		if((stack[top]=='E' && stack[top-1]=='$') && (*(ip)=='$'))
		printf("Null Input");
	printf("Enter the input string followed by $ \n");
		{
		exit(0);
	scanf("%s",input);
			display();
	}
	ip=input;
			printf(" Valid\n\n\n");
	do
	push('$');
			break;
	{
	printf("STACK\t BUFFER \t ACTION\n");
		}
		if((stack[top]=='E' && stack[top-1]=='$') && (*(ip)=='$'))
	printf("-----\t ------- \t------ \n");
		if(stack[top]=='$')
		{
	display();
		{
			display();
	if(stack[top]=='$' && *ip=='$'){
			push(*ip);
			printf(" Valid\n\n\n");
		printf("Null Input");
			ip++;
			break;
		exit(0);
			printf("Shift");
		}
	}
		}
		if(stack[top]=='$')
	do
		else if(stack[top]=='d')
		{
	{
		{
			push(*ip);
		if((stack[top]=='E' && stack[top-1]=='$') && (*(ip)=='$'))
			display();
			ip++;
		{
			pop();
			printf("Shift");
			display();
			push('E');
		}
			printf(" Valid\n\n\n");
			printf("Reduce E->d");
		else if(stack[top]=='d')
			break;
		}
		{
		}
		else if(stack[top]=='E' && stack[top-1]=='+' && stack[top-2]=='E'&& ip!='')
			display();
		if(stack[top]=='$')
		{
			pop();
		{
			display();
			push('E');
			push(*ip);
			pop();
			printf("Reduce E->d");
			ip++;
			pop();
		}
			printf("Shift");
			pop();
		else if(stack[top]=='E' && stack[top-1]=='+' && stack[top-2]=='E'&& ip!='')
		}
			push('E');
		{
		else if(stack[top]=='d')
			printf("Reduce E->E+E");
			display();
		{
		}
			pop();
			display();
		else if(stack[top]=='E' && stack[top-1]=='*' && stack[top-2]=='E')
			pop();
			pop();
		{
			pop();
			push('E');
			display();
			push('E');
			printf("Reduce E->d");
			pop();
			printf("Reduce E->E+E");
		}
			pop();
		}
		else if(stack[top]=='E' && stack[top-1]=='+' && stack[top-2]=='E'&& ip!='')
			pop();
		else if(stack[top]=='E' && stack[top-1]=='*' && stack[top-2]=='E')
		{
			push('E');
		{
			display();
			printf("Reduce E->E*E");
			display();
			pop();
		}
			pop();
			pop();
		else if(stack[top]==')' && stack[top-1]=='E' && stack[top-2]=='(')
			pop();
			pop();
		{
			pop();
			push('E');
			display();
			push('E');
			printf("Reduce E->E+E");

			printf("Reduce E->E*E");
		}
			pop();
		}
		else if(stack[top]=='E' && stack[top-1]=='*' && stack[top-2]=='E')
			pop();
		else if(stack[top]==')' && stack[top-1]=='E' && stack[top-2]=='(')
		{
			pop();
		{
			display();
			push('E');
			display();
			pop();
			printf("Reduce E->(E)");

			pop();
		}
			pop();
			pop();
		else if(*ip=='$')
			pop();
			push('E');
		{ 
			pop();
			printf("Reduce E->E*E");
			printf(" Invalid\n\n\n");
			push('E');
		}
			break;
			printf("Reduce E->(E)");
		else if(stack[top]==')' && stack[top-1]=='E' && stack[top-2]=='(')
		}
		}
		{
		else
		else if(*ip=='$')
			display();
		{
		{ 

			display();
			printf(" Invalid\n\n\n");
			pop();
			push(*ip);
			break;
			pop();
			ip++;
		}
			pop();
			printf("shift");
		else
			push('E');
		}
		{
			printf("Reduce E->(E)");
	}while(1);
			display();
		}
}
			push(*ip);
		else if(*ip=='$')
			ip++;
		{ 
			printf("shift");
			printf(" Invalid\n\n\n");
		}
			break;
	}while(1);
		}
}
		else
		{
			display();
			push(*ip);
			ip++;
			printf("shift");
		}
	}while(1);
}
